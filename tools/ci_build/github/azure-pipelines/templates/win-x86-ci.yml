parameters:
  DoDebugBuild: 'true'
  DoCompliance: 'false'
  BuildCommand: ''
  JobName: 'Windows_CI_Dev_x86'
  DoNugetPack:  'false'
  NuPackScript : ''
  ArtifactName: 'drop-win-x86-zip'
  DoEsrp: 'false'
  DoTestCoverage: 'false'
  BuildArch: 'x86'
  SetVcvars: 'false'
  msbuildArchitecture: 'x86'
  MsbuildArguments: '/m'
  EnvSetupScript: 'setup_env_x86.bat'
  CudaVersion: ''
  AgentPool: 'Win-CPU'
  AgentDemands: []

jobs:
- job: ${{ parameters.JobName }}
  timeoutInMinutes: 120
  pool:
    name: ${{ parameters.AgentPool }}
    demands: ${{ parameters.AgentDemands }}
  variables:
    buildDirectory: '$(Build.BinariesDirectory)'
    BuildCommand: ${{ parameters.BuildCommand }}
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
    PlatformTarget: x86
    RuntimeIdentifier: win-x86

  steps:
    - template: set-test-data-variables-step.yml
    - template: windows-build-tools-setup-steps.yml
      parameters:
        EnvSetupScript: ${{ parameters.EnvSetupScript }}
        buildArch: ${{ parameters.msbuildArchitecture }}
        setVcvars: ${{ parameters.SetVcvars }}

    - task: CmdLine@1
      displayName: 'Download test data and generate cmake config'
      inputs:
        filename: '$(Build.BinariesDirectory)\packages\python\python.exe'
        arguments: '$(BuildCommand) --update --config Debug RelWithDebInfo'
        workingDirectory: "$(Build.BinariesDirectory)"
        
    # Build Debug Mode
    - ${{ if eq(parameters['DoDebugBuild'], 'true') }}:
      - task: DotNetCoreCLI@2
        displayName: 'Restore nuget packages for debug build'
        inputs:
          command: restore
          projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
          configuration: 'Debug'          
          arguments: '--configuration Debug /p:Platform="Any CPU"'
          workingDirectory: '$(Build.SourcesDirectory)\csharp'    
      - task: VSBuild@1
        displayName: 'Build Debug'
        inputs:
          solution: '$(Build.BinariesDirectory)\Debug\onnxruntime.sln'
          platform: 'Win32'
          configuration: 'Debug'
          msbuildArgs: ${{ parameters.MsbuildArguments }}
          msbuildArchitecture: $(BuildArch)
          maximumCpuCount: true
          logProjectEvents: true
          workingFolder: '$(Build.BinariesDirectory)\Debug'
          createLogFile: true

      - task: BatchScript@1
        displayName: 'Test Debug'
        inputs:
          filename: '$(Build.BinariesDirectory)\packages\python\python.exe'
          arguments: '$(BuildCommand) --test --config Debug'
          workingFolder: '$(Build.BinariesDirectory)'

      - task: DotNetCoreCLI@2
        displayName: 'Build C# Debug'
        inputs:
          command: build
          projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
          configuration: 'Debug'          
          arguments: '--configuration Debug /p:Platform="Any CPU"'
          workingDirectory: '$(Build.SourcesDirectory)\csharp'
          
      - task: DotNetCoreCLI@2
        displayName: 'Test C# Debug'
        inputs:
          command: test
          projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
          configuration: 'Debug'          
          arguments: '--configuration Debug /p:Platform="Any CPU"'
          workingDirectory: '$(Build.SourcesDirectory)\csharp'

    # Run test coverage report
    - ${{ if eq(parameters['DoTestCoverage'], 'true') }}:
      - template: windows-code-coverage-steps.yml
        parameters:
          OpenCppCoverageExe: '$(Build.BinariesDirectory)\OpenCppCoverage\OpenCppCoverage.exe'

    # Build RelWithDebInfo -- this variable required to build C#
    - script: |
       @echo ##vso[task.setvariable variable=Configuration]RelWithDebInfo

    - task: DotNetCoreCLI@2
      displayName: 'Restore nuget packages for RelWithDebInfo build'
      inputs:
        command: restore
        projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
        configuration: 'RelWithDebInfo'          
        arguments: '--configuration RelWithDebInfo /p:Platform="Any CPU"'
        workingDirectory: '$(Build.SourcesDirectory)\csharp'
        
    - task: VSBuild@1
      displayName: 'Build RelWithDebInfo'
      inputs:
        solution: '$(Build.BinariesDirectory)\RelWithDebInfo\onnxruntime.sln'
        platform: 'Win32'
        configuration: 'RelWithDebInfo'
        msbuildArgs: ${{ parameters.MsbuildArguments }}
        msbuildArchitecture: $(BuildArch)
        maximumCpuCount: true
        logProjectEvents: true
        workingFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
        createLogFile: true

    - task: BatchScript@1
      displayName: 'Test RelWithDebInfo'
      inputs:
        filename: '$(Build.BinariesDirectory)\packages\python\python.exe'
        arguments: '$(BuildCommand) --test --config RelWithDebInfo'
        workingFolder: "$(Build.BinariesDirectory)"

    - task: DotNetCoreCLI@2
      displayName: 'Build C# RelWithDebInfo'
      inputs:
        command: build
        projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
        configuration: 'RelWithDebInfo'          
        arguments: '--configuration RelWithDebInfo /p:Platform="Any CPU"'
        workingDirectory: '$(Build.SourcesDirectory)\csharp'

    - task: DotNetCoreCLI@2
      displayName: 'Test C# RelWithDebInfo'
      inputs:
        command: test
        projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
        configuration: 'RelWithDebInfo'          
        arguments: '--configuration RelWithDebInfo /p:Platform="Any CPU"'
        workingDirectory: '$(Build.SourcesDirectory)\csharp'

    - task: PublishTestResults@2
      displayName: 'Publish unit test results'
      inputs:
        testResultsFiles: '**\*.results.xml'
        searchFolder: '$(Build.BinariesDirectory)'
        testRunTitle: 'Unit Test Run'
      condition: succeededOrFailed()

    # Nuget packaging if needed
    - ${{ if eq(parameters['DoNugetPack'], 'true') }}:
      # Esrp signing
      - template: esrp_dll.yml
        parameters:
          FolderPath: '$(Build.BinariesDirectory)\RelWithDebInfo'
          DisplayName: 'ESRP - Sign Native dlls'
          DoEsrp: ${{ parameters.DoEsrp }}

      - template: esrp_dll.yml
        parameters:
          FolderPath: '$(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo'
          DisplayName: 'ESRP - Sign C# dlls'
          DoEsrp: ${{ parameters.DoEsrp }}

      - script: |
         ${{ parameters.NuPackScript }}
        workingDirectory: '$(Build.SourcesDirectory)\csharp'
        displayName: 'Create NuGet Package'

      - task: PublishPipelineArtifact@0
        displayName: 'Publish Pipeline Artifact: drop-nuget'
        inputs:
          artifactName: ${{ parameters.ArtifactName }}
          targetPath: '$(Build.ArtifactStagingDirectory)'

    # Compliance tasks require logs from Debug Build
    - ${{ if eq(parameters['DoCompliance'], 'true') }}:
      - template: compliance.yml

    - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
      displayName: 'Component Detection'
      condition: succeeded()

    - template: clean-agent-build-directory-step.yml

