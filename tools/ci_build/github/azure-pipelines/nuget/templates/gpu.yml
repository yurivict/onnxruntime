# Defined as pipeline variables
# variables:
#   AgentPoolWin : 'Win-CPU-CUDA10'
#   AgentPoolLinux : 'Linux-CPU'
#   AgentPoolMacOS : 'macOS-10.13'

parameters:
  DoEsrp: 'false'
  PackageName: 'Microsoft.ML.OnnxRuntime.Gpu'

jobs: 
- template: ../../templates/win-ci.yml
  parameters:
    AgentPool : $(AgentPoolWin)
    JobName: 'Windows_CI_GPU_Dev'
    BuildCommand: '$(Build.SourcesDirectory)\tools\ci_build\build.py --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --cmake_path $(Build.BinariesDirectory)\cmake\bin\cmake.exe --ctest_path $(Build.BinariesDirectory)\cmake\bin\ctest.exe  --enable_pybind --build_shared_lib  --build_csharp --enable_onnx_tests --use_cuda --cuda_home="C:\local\cuda_10.0.130_win10" --cudnn_home="C:\local\cudnn-10.0-windows10-x64-v7.3.1.20\cuda" --cuda_version 10.0'
    DoDebugBuild: 'false'
    DoNugetPack : 'true'
    DoCompliance: 'false'
    DoEsrp: ${{ parameters.DoEsrp }}
    BuildArch: 'amd64'
    SetVcvars: 'true'
    MsbuildArguments: '/m /p:CudaToolkitDir=C:\local\cuda_10.0.130_win10\'
    EnvSetupScript: 'setup_env_cuda.bat'
    CudaVersion: '10.0'
    PackageId: 'Microsoft.ML.OnnxRuntime.Gpu'
    NuPackScript: |
     dotnet pack $(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\Microsoft.ML.OnnxRuntime.csproj --no-build --configuration RelWithDebInfo -p:PackageId=Microsoft.ML.OnnxRuntime.Gpu
     copy $(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)

- job: 'Linux_CI_GPU_Dev'
  pool: $(AgentPoolLinux)
  steps:    
    - template: ../../templates/set-version-number-variables-step.yml
    - template: ../../templates/linux-set-variables-and-download.yml
    - task: CmdLine@2
      inputs:
        script: |
          docker build -t onnxruntime-centos6-gpu --build-arg BUILD_USER=onnxruntimedev --build-arg BUILD_UID=$(id -u) --build-arg PYTHON_VERSION=$(python.version) -f Dockerfile.centos6_gpu .
        workingDirectory: $(Build.SourcesDirectory)/tools/ci_build/github/linux/docker
    - task: CmdLine@2
      inputs:
        script: |
          docker run --gpus all -e NVIDIA_VISIBLE_DEVICES=all --rm --volume $(Build.SourcesDirectory):/onnxruntime_src --volume $(Build.BinariesDirectory):/build -e NIGHTLY_BUILD onnxruntime-centos6-gpu /bin/bash -c "/usr/bin/python3.6 /onnxruntime_src/tools/ci_build/build.py --build_dir /build --config Release --skip_submodule_sync  --parallel --build_shared_lib --cmake_path /usr/bin/cmake --ctest_path /usr/bin/ctest --use_automl --use_cuda --cuda_version=10.0 --cuda_home=/usr/local/cuda-10.0  --cudnn_home=/usr/local/cuda-10.0 --enable_onnx_tests && cd /build/Release && make install DESTDIR=/build/linux-x64"
    - script: |
       set -e -x
       mv $(Build.BinariesDirectory)/linux-x64/usr/local/lib64 $(Build.BinariesDirectory)/linux-x64/linux-x64
       cd $(Build.BinariesDirectory)/linux-x64
       zip -r linux-x64.zip linux-x64
       cp $(Build.BinariesDirectory)/linux-x64/linux*.zip $(Build.ArtifactStagingDirectory)
       ls -al $(Build.ArtifactStagingDirectory)
      displayName: 'Create Artifacts'
    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: 'drop-linux'
        targetPath: '$(Build.ArtifactStagingDirectory)'
    - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
      displayName: 'Component Detection'
      condition: succeeded()
    - template: ../../templates/clean-agent-build-directory-step.yml

- job: NuGet_Packaging
  pool: $(AgentPoolWin)
  dependsOn:
  - Windows_CI_GPU_Dev
  - Linux_CI_GPU_Dev
  condition: succeeded()
  steps:  
  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'drop-nuget'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
    continueOnError: true

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - Linux'
    inputs:
      artifactName: 'drop-linux'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
    continueOnError: true

  - script: |
     pushd $(Build.BinariesDirectory)\nuget-artifact
     dir
     powershell -Command "Invoke-WebRequest http://stahlworks.com/dev/unzip.exe -OutFile unzip.exe"
     powershell -Command "Invoke-WebRequest http://stahlworks.com/dev/zip.exe -OutFile zip.exe"
     set PATH=%CD%;%PATH%
     FOR /R %%i IN (*.nupkg) do ( 
         rename %%~ni.nupkg %%~ni.zip
         unzip %%~ni.zip -d %%~ni
         del /Q %%~ni.zip
         unzip linux-x64.zip -d linux-x64
         mkdir %%~ni\runtimes\linux-x64
         mkdir %%~ni\runtimes\linux-x64\native
         move linux-x64\linux-x64\libonnxruntime.so %%~ni\runtimes\linux-x64\native\libonnxruntime.so
         pushd %%~ni
         zip -r ..\%%~ni.zip .
         popd
         move %%~ni.zip %%~ni.nupkg
     )
     popd
     copy $(Build.BinariesDirectory)\nuget-artifact\*.nupkg $(Build.ArtifactStagingDirectory)
    displayName: 'Bundle NuGet and other binaries'

  - template: ../../templates/esrp_nuget.yml
    parameters:
      DisplayName: 'ESRP - sign NuGet package'
      FolderPath: '$(Build.ArtifactStagingDirectory)'
      DoEsrp: ${{ parameters.DoEsrp }}

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Pipeline NuGet Artifact'
    inputs:
      artifactName: 'drop-signed-nuget'
      targetPath: '$(Build.ArtifactStagingDirectory)'

- template: test_win.yml
  parameters:
    AgentPool : $(AgentPoolWin)
- template: test_linux.yml
  parameters:
    AgentPool : $(AgentPoolLinux)
    TestGPU : 'true'
